
//! Autogenerated weights for pallet_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-16, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `michallustyk-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --pallet=pallet_registry
// --execution=wasm
// --wasm-execution=compiled
// --steps=20
// --repeat=10
// --output=frame/registry/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_registry.
pub trait WeightInfo {
	fn add_registry(r: u32, ) -> Weight;
	fn request_entity(s: u32, ) -> Weight;
	fn request_registration(s: u32, ) -> Weight;
	fn cancel_request() -> Weight;
	fn unregister(r: u32, ) -> Weight;
	fn register_entity(r: u32, s: u32, ) -> Weight;
	fn set_registered_entity(r: u32, s: u32, ) -> Weight;
	fn request_entity_unregister() -> Weight;
}

/// Weights for pallet_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: CompanyRegistry Registrars (r:1 w:1)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn add_registry(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + r * (32 ±0)`
		//  Estimated: `1806`
		// Minimum execution time: 25_829_000 picoseconds.
		Weight::from_parts(27_167_912, 1806)
			// Standard Error: 113_816
			.saturating_add(Weight::from_parts(576_930, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CompanyRegistry NextEntityId (r:1 w:1)
	/// Proof: CompanyRegistry NextEntityId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:0 w:1)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry OwnerEntities (r:0 w:1)
	/// Proof: CompanyRegistry OwnerEntities (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_entity(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `11717`
		// Minimum execution time: 82_255_000 picoseconds.
		Weight::from_parts(93_925_381, 11717)
			// Standard Error: 291
			.saturating_add(Weight::from_parts(313, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_registration(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594 + s * (1 ±0)`
		//  Estimated: `11717`
		// Minimum execution time: 111_681_000 picoseconds.
		Weight::from_parts(127_058_571, 11717)
			// Standard Error: 279
			.saturating_add(Weight::from_parts(2_409, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `694`
		//  Estimated: `11717`
		// Minimum execution time: 83_759_000 picoseconds.
		Weight::from_parts(92_045_000, 11717)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn unregister(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712 + r * (32 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 84_480_000 picoseconds.
		Weight::from_parts(104_915_478, 11716)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn register_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `452 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11717`
		// Minimum execution time: 58_130_000 picoseconds.
		Weight::from_parts(61_548_430, 11717)
			// Standard Error: 170_423
			.saturating_add(Weight::from_parts(1_345_365, 0).saturating_mul(r.into()))
			// Standard Error: 153
			.saturating_add(Weight::from_parts(2_286, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn set_registered_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `406 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 41_810_000 picoseconds.
		Weight::from_parts(39_507_735, 11716)
			// Standard Error: 190_229
			.saturating_add(Weight::from_parts(1_022_280, 0).saturating_mul(r.into()))
			// Standard Error: 171
			.saturating_add(Weight::from_parts(3_270, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:0)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	fn request_entity_unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1482`
		//  Estimated: `11717`
		// Minimum execution time: 52_560_000 picoseconds.
		Weight::from_parts(56_978_000, 11717)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: CompanyRegistry Registrars (r:1 w:1)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn add_registry(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + r * (32 ±0)`
		//  Estimated: `1806`
		// Minimum execution time: 25_829_000 picoseconds.
		Weight::from_parts(27_167_912, 1806)
			// Standard Error: 113_816
			.saturating_add(Weight::from_parts(576_930, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CompanyRegistry NextEntityId (r:1 w:1)
	/// Proof: CompanyRegistry NextEntityId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:0 w:1)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry OwnerEntities (r:0 w:1)
	/// Proof: CompanyRegistry OwnerEntities (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_entity(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `11717`
		// Minimum execution time: 82_255_000 picoseconds.
		Weight::from_parts(93_925_381, 11717)
			// Standard Error: 291
			.saturating_add(Weight::from_parts(313, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 8194]`.
	fn request_registration(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594 + s * (1 ±0)`
		//  Estimated: `11717`
		// Minimum execution time: 111_681_000 picoseconds.
		Weight::from_parts(127_058_571, 11717)
			// Standard Error: 279
			.saturating_add(Weight::from_parts(2_409, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `694`
		//  Estimated: `11717`
		// Minimum execution time: 83_759_000 picoseconds.
		Weight::from_parts(92_045_000, 11717)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Balances Reserves (r:1 w:1)
	/// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	fn unregister(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712 + r * (32 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 84_480_000 picoseconds.
		Weight::from_parts(104_915_478, 11716)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn register_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `452 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11717`
		// Minimum execution time: 58_130_000 picoseconds.
		Weight::from_parts(61_548_430, 11717)
			// Standard Error: 170_423
			.saturating_add(Weight::from_parts(1_345_365, 0).saturating_mul(r.into()))
			// Standard Error: 153
			.saturating_add(Weight::from_parts(2_286, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: CompanyRegistry Registrars (r:1 w:0)
	/// Proof: CompanyRegistry Registrars (max_values: Some(1), max_size: Some(321), added: 816, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:1)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 8]`.
	/// The range of component `s` is `[2, 8194]`.
	fn set_registered_entity(r: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `406 + r * (32 ±0) + s * (1 ±0)`
		//  Estimated: `11716`
		// Minimum execution time: 41_810_000 picoseconds.
		Weight::from_parts(39_507_735, 11716)
			// Standard Error: 190_229
			.saturating_add(Weight::from_parts(1_022_280, 0).saturating_mul(r.into()))
			// Standard Error: 171
			.saturating_add(Weight::from_parts(3_270, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: CompanyRegistry EntityOwner (r:1 w:0)
	/// Proof: CompanyRegistry EntityOwner (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Requests (r:1 w:1)
	/// Proof: CompanyRegistry Requests (max_values: None, max_size: Some(8252), added: 10727, mode: MaxEncodedLen)
	/// Storage: CompanyRegistry Registries (r:1 w:0)
	/// Proof: CompanyRegistry Registries (max_values: None, max_size: Some(8251), added: 10726, mode: MaxEncodedLen)
	fn request_entity_unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1482`
		//  Estimated: `11717`
		// Minimum execution time: 52_560_000 picoseconds.
		Weight::from_parts(56_978_000, 11717)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
