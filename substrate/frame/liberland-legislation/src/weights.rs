
//! Autogenerated weights for pallet_liberland_legislation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-26, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `kacper-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --pallet=pallet_liberland_legislation
// --execution=wasm
// --wasm-execution=compiled
// --steps=20
// --repeat=10
// --output=frame/liberland-legislation/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_liberland_legislation.
pub trait WeightInfo {
	fn add_legislation(s: u32, ) -> Weight;
	fn repeal_legislation(s: u32, ) -> Weight;
	fn repeal_legislation_section() -> Weight;
	fn submit_veto() -> Weight;
	fn revert_veto() -> Weight;
	fn trigger_headcount_veto(c: u32, ) -> Weight;
	fn trigger_section_headcount_veto(c: u32, ) -> Weight;
	fn amend_legislation(c: u32, ) -> Weight;
}

/// Weights for pallet_liberland_legislation using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: LiberlandLegislation Legislation (r:1 w:1024)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation LegislationVersion (r:0 w:1025)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 1024]`.
	fn add_legislation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `24011`
		// Minimum execution time: 50_265_000 picoseconds.
		Weight::from_parts(50_335_000, 24011)
			// Standard Error: 23_214
			.saturating_add(Weight::from_parts(24_912_451, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
	}
	/// Storage: LiberlandLegislation LegislationVersion (r:1025 w:1024)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:1025 w:1024)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 1024]`.
	fn repeal_legislation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `301 + s * (89 ±0)`
		//  Estimated: `24011 + s * (23021 ±0)`
		// Minimum execution time: 55_445_000 picoseconds.
		Weight::from_parts(56_206_000, 24011)
			// Standard Error: 18_514
			.saturating_add(Weight::from_parts(16_376_530, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 23021).saturating_mul(s.into()))
	}
	/// Storage: LiberlandLegislation LegislationVersion (r:1 w:1)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:1 w:1)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	fn repeal_legislation_section() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `24011`
		// Minimum execution time: 43_693_000 picoseconds.
		Weight::from_parts(44_124_000, 24011)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Identity IdentityOf (r:1 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof: LiberlandLegislation VetosCount (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	fn submit_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446`
		//  Estimated: `11003`
		// Minimum execution time: 48_873_000 picoseconds.
		Weight::from_parts(49_374_000, 11003)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof: LiberlandLegislation VetosCount (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	fn revert_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `305`
		//  Estimated: `3576`
		// Minimum execution time: 42_150_000 picoseconds.
		Weight::from_parts(42_731_000, 3576)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: LLM Citizens (r:1 w:0)
	/// Proof: LLM Citizens (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1001 w:0)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: Identity IdentityOf (r:1000 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:1025 w:1024)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation LegislationVersion (r:1024 w:1024)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `c` is `[16, 1000]`.
	fn trigger_headcount_veto(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `92363 + c * (158 ±0)`
		//  Estimated: `23597515 + c * (10013 ±0)`
		// Minimum execution time: 17_096_200_000 picoseconds.
		Weight::from_parts(17_045_729_951, 23597515)
			// Standard Error: 71_425
			.saturating_add(Weight::from_parts(11_101_280, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2051_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(2048_u64))
			.saturating_add(Weight::from_parts(0, 10013).saturating_mul(c.into()))
	}
	/// Storage: LLM Citizens (r:1 w:0)
	/// Proof: LLM Citizens (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1001 w:0)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: Identity IdentityOf (r:1000 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation LegislationVersion (r:1 w:1)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:0 w:1)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// The range of component `c` is `[16, 1000]`.
	fn trigger_section_headcount_veto(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `974 + c * (158 ±0)`
		//  Estimated: `3576 + c * (10013 ±0)`
		// Minimum execution time: 203_927_000 picoseconds.
		Weight::from_parts(205_169_000, 3576)
			// Standard Error: 26_713
			.saturating_add(Weight::from_parts(9_957_839, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 10013).saturating_mul(c.into()))
	}
	/// Storage: LiberlandLegislation LegislationVersion (r:1 w:1)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:0 w:1)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 20480]`.
	fn amend_legislation(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `3535`
		// Minimum execution time: 36_479_000 picoseconds.
		Weight::from_parts(37_484_726, 3535)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(515, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: LiberlandLegislation Legislation (r:1 w:1024)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation LegislationVersion (r:0 w:1025)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 1024]`.
	fn add_legislation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `24011`
		// Minimum execution time: 50_265_000 picoseconds.
		Weight::from_parts(50_335_000, 24011)
			// Standard Error: 23_214
			.saturating_add(Weight::from_parts(24_912_451, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
	}
	/// Storage: LiberlandLegislation LegislationVersion (r:1025 w:1024)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:1025 w:1024)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 1024]`.
	fn repeal_legislation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `301 + s * (89 ±0)`
		//  Estimated: `24011 + s * (23021 ±0)`
		// Minimum execution time: 55_445_000 picoseconds.
		Weight::from_parts(56_206_000, 24011)
			// Standard Error: 18_514
			.saturating_add(Weight::from_parts(16_376_530, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 23021).saturating_mul(s.into()))
	}
	/// Storage: LiberlandLegislation LegislationVersion (r:1 w:1)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:1 w:1)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	fn repeal_legislation_section() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `24011`
		// Minimum execution time: 43_693_000 picoseconds.
		Weight::from_parts(44_124_000, 24011)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Identity IdentityOf (r:1 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof: LiberlandLegislation VetosCount (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	fn submit_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446`
		//  Estimated: `11003`
		// Minimum execution time: 48_873_000 picoseconds.
		Weight::from_parts(49_374_000, 11003)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: LiberlandLegislation Vetos (r:1 w:1)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	/// Proof: LiberlandLegislation VetosCount (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	fn revert_veto() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `305`
		//  Estimated: `3576`
		// Minimum execution time: 42_150_000 picoseconds.
		Weight::from_parts(42_731_000, 3576)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: LLM Citizens (r:1 w:0)
	/// Proof: LLM Citizens (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1001 w:0)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: Identity IdentityOf (r:1000 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:1025 w:1024)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation LegislationVersion (r:1024 w:1024)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `c` is `[16, 1000]`.
	fn trigger_headcount_veto(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `92363 + c * (158 ±0)`
		//  Estimated: `23597515 + c * (10013 ±0)`
		// Minimum execution time: 17_096_200_000 picoseconds.
		Weight::from_parts(17_045_729_951, 23597515)
			// Standard Error: 71_425
			.saturating_add(Weight::from_parts(11_101_280, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2051_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(2048_u64))
			.saturating_add(Weight::from_parts(0, 10013).saturating_mul(c.into()))
	}
	/// Storage: LLM Citizens (r:1 w:0)
	/// Proof: LLM Citizens (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Vetos (r:1001 w:0)
	/// Proof: LiberlandLegislation Vetos (max_values: None, max_size: Some(111), added: 2586, mode: MaxEncodedLen)
	/// Storage: Identity IdentityOf (r:1000 w:0)
	/// Proof: Identity IdentityOf (max_values: None, max_size: Some(7538), added: 10013, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation LegislationVersion (r:1 w:1)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:0 w:1)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// The range of component `c` is `[16, 1000]`.
	fn trigger_section_headcount_veto(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `974 + c * (158 ±0)`
		//  Estimated: `3576 + c * (10013 ±0)`
		// Minimum execution time: 203_927_000 picoseconds.
		Weight::from_parts(205_169_000, 3576)
			// Standard Error: 26_713
			.saturating_add(Weight::from_parts(9_957_839, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 10013).saturating_mul(c.into()))
	}
	/// Storage: LiberlandLegislation LegislationVersion (r:1 w:1)
	/// Proof: LiberlandLegislation LegislationVersion (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: LiberlandLegislation Legislation (r:0 w:1)
	/// Proof: LiberlandLegislation Legislation (max_values: None, max_size: Some(20546), added: 23021, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 20480]`.
	fn amend_legislation(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `3535`
		// Minimum execution time: 36_479_000 picoseconds.
		Weight::from_parts(37_484_726, 3535)
			// Standard Error: 13
			.saturating_add(Weight::from_parts(515, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
