
//! Autogenerated weights for pallet_contracts_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-12, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `michallustyk-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate-node
// benchmark
// pallet
// --pallet=pallet_contracts_registry
// --execution=wasm
// --wasm-execution=compiled
// --steps=20
// --repeat=10
// --output=substrate/frame/contracts-registry/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_contracts_registry.
pub trait WeightInfo {
	fn add_judge() -> Weight;
	fn judge_sign_contract() -> Weight;
	fn create_contract(s: u32, ) -> Weight;
	fn party_sign_contract() -> Weight;
	fn remove_judge() -> Weight;
	fn remove_contract() -> Weight;
}

/// Weights for pallet_contracts_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ContractsRegistry::Judges` (r:0 w:1)
	/// Proof: `ContractsRegistry::Judges` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn add_judge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_754_000 picoseconds.
		Weight::from_parts(13_055_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ContractsRegistry::Judges` (r:1 w:0)
	/// Proof: `ContractsRegistry::Judges` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::Contracts` (r:1 w:0)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::JudgesSignatures` (r:1 w:1)
	/// Proof: `ContractsRegistry::JudgesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn judge_sign_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `2101195`
		// Minimum execution time: 28_935_000 picoseconds.
		Weight::from_parts(29_296_000, 2101195)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::NextContractsId` (r:1 w:1)
	/// Proof: `ContractsRegistry::NextContractsId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::Contracts` (r:0 w:1)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 2097151]`.
	fn create_contract(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `283`
		//  Estimated: `4714`
		// Minimum execution time: 46_598_000 picoseconds.
		Weight::from_parts(47_129_000, 4714)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(714, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `ContractsRegistry::Contracts` (r:1 w:0)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::PartiesSignatures` (r:1 w:1)
	/// Proof: `ContractsRegistry::PartiesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn party_sign_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260`
		//  Estimated: `2101195`
		// Minimum execution time: 24_927_000 picoseconds.
		Weight::from_parts(25_178_000, 2101195)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ContractsRegistry::Judges` (r:0 w:1)
	/// Proof: `ContractsRegistry::Judges` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn remove_judge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_724_000 picoseconds.
		Weight::from_parts(13_025_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ContractsRegistry::JudgesSignatures` (r:1 w:0)
	/// Proof: `ContractsRegistry::JudgesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::PartiesSignatures` (r:1 w:0)
	/// Proof: `ContractsRegistry::PartiesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::Contracts` (r:1 w:1)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `975`
		//  Estimated: `2101195`
		// Minimum execution time: 64_302_000 picoseconds.
		Weight::from_parts(65_033_000, 2101195)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `ContractsRegistry::Judges` (r:0 w:1)
	/// Proof: `ContractsRegistry::Judges` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn add_judge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_754_000 picoseconds.
		Weight::from_parts(13_055_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ContractsRegistry::Judges` (r:1 w:0)
	/// Proof: `ContractsRegistry::Judges` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::Contracts` (r:1 w:0)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::JudgesSignatures` (r:1 w:1)
	/// Proof: `ContractsRegistry::JudgesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn judge_sign_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `287`
		//  Estimated: `2101195`
		// Minimum execution time: 28_935_000 picoseconds.
		Weight::from_parts(29_296_000, 2101195)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::NextContractsId` (r:1 w:1)
	/// Proof: `ContractsRegistry::NextContractsId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::Contracts` (r:0 w:1)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 2097151]`.
	fn create_contract(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `283`
		//  Estimated: `4714`
		// Minimum execution time: 46_598_000 picoseconds.
		Weight::from_parts(47_129_000, 4714)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(714, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `ContractsRegistry::Contracts` (r:1 w:0)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::PartiesSignatures` (r:1 w:1)
	/// Proof: `ContractsRegistry::PartiesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn party_sign_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260`
		//  Estimated: `2101195`
		// Minimum execution time: 24_927_000 picoseconds.
		Weight::from_parts(25_178_000, 2101195)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ContractsRegistry::Judges` (r:0 w:1)
	/// Proof: `ContractsRegistry::Judges` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn remove_judge() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_724_000 picoseconds.
		Weight::from_parts(13_025_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ContractsRegistry::JudgesSignatures` (r:1 w:0)
	/// Proof: `ContractsRegistry::JudgesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::PartiesSignatures` (r:1 w:0)
	/// Proof: `ContractsRegistry::PartiesSignatures` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	/// Storage: `ContractsRegistry::Contracts` (r:1 w:1)
	/// Proof: `ContractsRegistry::Contracts` (`max_values`: None, `max_size`: Some(2097730), added: 2100205, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Reserves` (r:1 w:1)
	/// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `975`
		//  Estimated: `2101195`
		// Minimum execution time: 64_302_000 picoseconds.
		Weight::from_parts(65_033_000, 2101195)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
