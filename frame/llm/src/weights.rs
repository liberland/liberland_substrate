
//! Autogenerated weights for pallet_llm
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-09, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `kacper-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --pallet=pallet_llm
// --execution=wasm
// --wasm-execution=compiled
// --steps=20
// --repeat=10
// --output=frame/llm/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_llm.
pub trait WeightInfo {
	fn politics_lock() -> Weight;
	fn politics_unlock() -> Weight;
	fn treasury_llm_transfer() -> Weight;
	fn treasury_llm_transfer_to_politipool() -> Weight;
	fn send_llm_to_politipool() -> Weight;
	fn send_llm() -> Weight;
	fn set_senate() -> Weight;
}

/// Weights for pallet_llm using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM LLMPolitics (r:1 w:1)
	fn politics_lock() -> Weight {
		// Minimum execution time: 89_990 nanoseconds.
		Weight::from_ref_time(90_621_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: LLM LLMPolitics (r:1 w:1)
	// Storage: LLM Withdrawlock (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM WithdrawlockDuration (r:1 w:0)
	// Storage: LLM ElectionlockDuration (r:1 w:0)
	// Storage: LLM Electionlock (r:0 w:1)
	fn politics_unlock() -> Weight {
		// Minimum execution time: 101_993 nanoseconds.
		Weight::from_ref_time(102_675_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: LLM Senate (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn treasury_llm_transfer() -> Weight {
		// Minimum execution time: 80_733 nanoseconds.
		Weight::from_ref_time(85_743_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: LLM Senate (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM LLMPolitics (r:1 w:1)
	fn treasury_llm_transfer_to_politipool() -> Weight {
		// Minimum execution time: 134_535 nanoseconds.
		Weight::from_ref_time(136_569_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM LLMPolitics (r:1 w:1)
	fn send_llm_to_politipool() -> Weight {
		// Minimum execution time: 130_648 nanoseconds.
		Weight::from_ref_time(132_361_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn send_llm() -> Weight {
		// Minimum execution time: 71_947 nanoseconds.
		Weight::from_ref_time(72_487_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: LLM Senate (r:0 w:1)
	fn set_senate() -> Weight {
		// Minimum execution time: 7_323 nanoseconds.
		Weight::from_ref_time(7_464_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM LLMPolitics (r:1 w:1)
	fn politics_lock() -> Weight {
		// Minimum execution time: 89_990 nanoseconds.
		Weight::from_ref_time(90_621_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: LLM LLMPolitics (r:1 w:1)
	// Storage: LLM Withdrawlock (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM WithdrawlockDuration (r:1 w:0)
	// Storage: LLM ElectionlockDuration (r:1 w:0)
	// Storage: LLM Electionlock (r:0 w:1)
	fn politics_unlock() -> Weight {
		// Minimum execution time: 101_993 nanoseconds.
		Weight::from_ref_time(102_675_000)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: LLM Senate (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn treasury_llm_transfer() -> Weight {
		// Minimum execution time: 80_733 nanoseconds.
		Weight::from_ref_time(85_743_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: LLM Senate (r:1 w:0)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM LLMPolitics (r:1 w:1)
	fn treasury_llm_transfer_to_politipool() -> Weight {
		// Minimum execution time: 134_535 nanoseconds.
		Weight::from_ref_time(136_569_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	// Storage: LLM LLMPolitics (r:1 w:1)
	fn send_llm_to_politipool() -> Weight {
		// Minimum execution time: 130_648 nanoseconds.
		Weight::from_ref_time(132_361_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn send_llm() -> Weight {
		// Minimum execution time: 71_947 nanoseconds.
		Weight::from_ref_time(72_487_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: LLM Senate (r:0 w:1)
	fn set_senate() -> Weight {
		// Minimum execution time: 7_323 nanoseconds.
		Weight::from_ref_time(7_464_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
