
//! Autogenerated weights for pallet_liberland_legislation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-09, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `kacper-HP-ProBook-445-G7`, CPU: `AMD Ryzen 7 4700U with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --pallet=pallet_liberland_legislation
// --execution=wasm
// --wasm-execution=compiled
// --steps=20
// --repeat=10
// --output=frame/liberland-legislation/src/weights.rs
// --extrinsic=*
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_liberland_legislation.
pub trait WeightInfo {
	fn add_law(s: u32, ) -> Weight;
	fn repeal_law() -> Weight;
	fn submit_veto() -> Weight;
	fn revert_veto() -> Weight;
	fn trigger_headcount_veto(c: u32, ) -> Weight;
}

/// Weights for pallet_liberland_legislation using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: LiberlandLegislation Laws (r:1 w:1)
	/// The range of component `s` is `[1, 65536]`.
	fn add_law(s: u32, ) -> Weight {
		// Minimum execution time: 26_651 nanoseconds.
		Weight::from_ref_time(28_564_049)
			// Standard Error: 7
			.saturating_add(Weight::from_ref_time(494).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: LiberlandLegislation Laws (r:0 w:1)
	fn repeal_law() -> Weight {
		// Minimum execution time: 22_392 nanoseconds.
		Weight::from_ref_time(22_703_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: LiberlandLegislation Vetos (r:1 w:1)
	// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	fn submit_veto() -> Weight {
		// Minimum execution time: 50_997 nanoseconds.
		Weight::from_ref_time(52_279_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: LiberlandLegislation Vetos (r:1 w:1)
	// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	fn revert_veto() -> Weight {
		// Minimum execution time: 42_801 nanoseconds.
		Weight::from_ref_time(43_323_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: LLM Citizens (r:1 w:0)
	// Storage: LiberlandLegislation Vetos (r:17 w:16)
	// Storage: Identity IdentityOf (r:16 w:0)
	// Storage: LiberlandLegislation VetosCount (r:0 w:1)
	// Storage: LiberlandLegislation Laws (r:0 w:1)
	/// The range of component `c` is `[16, 5000]`.
	fn trigger_headcount_veto(c: u32, ) -> Weight {
		// Minimum execution time: 250_866 nanoseconds.
		Weight::from_ref_time(252_589_000)
			// Standard Error: 34_718
			.saturating_add(Weight::from_ref_time(16_048_575).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: LiberlandLegislation Laws (r:1 w:1)
	/// The range of component `s` is `[1, 65536]`.
	fn add_law(s: u32, ) -> Weight {
		// Minimum execution time: 26_651 nanoseconds.
		Weight::from_ref_time(28_564_049)
			// Standard Error: 7
			.saturating_add(Weight::from_ref_time(494).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: LiberlandLegislation Laws (r:0 w:1)
	fn repeal_law() -> Weight {
		// Minimum execution time: 22_392 nanoseconds.
		Weight::from_ref_time(22_703_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: LiberlandLegislation Vetos (r:1 w:1)
	// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	fn submit_veto() -> Weight {
		// Minimum execution time: 50_997 nanoseconds.
		Weight::from_ref_time(52_279_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: LiberlandLegislation Vetos (r:1 w:1)
	// Storage: LiberlandLegislation VetosCount (r:1 w:1)
	fn revert_veto() -> Weight {
		// Minimum execution time: 42_801 nanoseconds.
		Weight::from_ref_time(43_323_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: LLM Citizens (r:1 w:0)
	// Storage: LiberlandLegislation Vetos (r:17 w:16)
	// Storage: Identity IdentityOf (r:16 w:0)
	// Storage: LiberlandLegislation VetosCount (r:0 w:1)
	// Storage: LiberlandLegislation Laws (r:0 w:1)
	/// The range of component `c` is `[16, 5000]`.
	fn trigger_headcount_veto(c: u32, ) -> Weight {
		// Minimum execution time: 250_866 nanoseconds.
		Weight::from_ref_time(252_589_000)
			// Standard Error: 34_718
			.saturating_add(Weight::from_ref_time(16_048_575).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
}
